"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, ac82885, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1:ac82885
"""

import sys
class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    '''isa linked list'''
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 3/24. If you choose to use
        # a dummy node, comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None

    def insert_term(self, coeff, exp):
        '''i mean.. it inserts terms to the linked list w/ the exponent'''
        if coeff == 0:
            return

        nnode = Node(coeff, exp)
        if not self.head or self.head.exp<exp:
            nnode.next = self.head
            self.head = nnode
            return

        current = self.head
        while current.next and current.next.exp>exp:
            current=current.next

        if current.next and current.next.exp == exp:
            current.next.coeff += coeff
            if current.next.coeff == 0:
                current.next = current.next.next
        else:
            nnode.next = current.next
            current.next = nnode

    def add(self, other):
        '''adds p to polynomial as a new linklist'''
        result = LinkedList()
        term1, term2 = self.head, other.head

        while term1 or term2:
            if not term2 or (term1 and term1.exp>term2.exp):
                result.insert_term(term1.coeff, term1.exp)
                term1 = term1.next
            elif not term1 or (term2 and term2.exp>term1.exp):
                result.insert_term(term2.coeff, term2.exp)
                term2 = term2.next
            else:
                combined_coeff = term1.coeff+term2.coeff
                if combined_coeff>0:
                    result.insert_term(combined_coeff, term1.exp)
                term1, term2 = term1.next, term2.next

        return result

    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, other):
        '''return a product of 2 polynomials as a list'''
        result = LinkedList()
        term1 = self.head

        if not term1 or not other.head:
            return result

        while term1:
            temp = LinkedList()
            term2 = other.head
            while term2:
                new_coeff = term1.coeff*term2.coeff
                new_exp = term1.exp+term2.exp
                temp.insert_term(new_coeff, new_exp)
                term2=term2.next
            result = result.add(temp)
            term1=term1.next
        return result

    def __str__(self):
        terms=[]
        current = self.head
        while current:
            if current.coeff>0 and terms:
                terms.append(f"+ ({current.coeff}, {current.exp})")
            else:
                terms.append(f"({current.coeff}, {current.exp})")
            current = current.next
        return " ".join(terms) if terms else "0"



def main():
    '''read data from stdin (terminal/file) using input() and create polynomial p'''
    input_raw = sys.stdin.read()
    input_strip = input_raw.strip()
    input_data = input_strip.split("\n")

    i=0
    p = LinkedList()
    n = int(input_data[i])
    i+=1

    for _ in range(n):
        coeff, exp = map(int, input_data[i].split())
        p.insert_term(coeff, exp)
        i+=1
    i+=1
    # read data from stdin (terminal/file) using input() and create polynomial q
    q = LinkedList()
    m = int(input_data[i])
    i+=1
    for _ in range(m):
        coeff, exp = map(int, input_data[i].split())
        q.insert_term(coeff, exp)
        i+=1
    # get sum of p and q as a new linked list and print sum
    print(p.add(q))
    # get product of p and q as a new linked list and print product
    print(p.mult(q))


if __name__ == "__main__":
    main()
