"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Bird Cabrera and literally just me, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1:AC82885
UT EID 2:
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


# TODO: implement this class. You may delete this comment when you are done.
class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        if salary < 0:
            raise ValueError(SALARY_ERROR_MESSAGE)

        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        self.salary = salary
    @abstractmethod
    def work(self):
        """
        Abstract method
        """
        pass
    @property
    def name(self):
        """
        returns name
        """
        return self.__name
    @property
    def manager(self):
        """
        returns manager
        """
        return self.__manager
    @property
    def performance(self):
        """
        returns performance
        """
        return self._performance
    @property
    def happiness(self):
        """
        returns happy
        """
        return self._happiness
    @property
    def salary(self):
        """
        money level
        """
        return self._salary
    @performance.setter
    def performance(self, value):
        self._performance = max(PERCENTAGE_MIN, min(PERCENTAGE_MAX, value))
    @happiness.setter
    def happiness(self, value):
        self._happiness = max(PERCENTAGE_MIN, min(PERCENTAGE_MAX, value))
    @salary.setter
    def salary(self, value):
        if value < 0:
            raise ValueError(SALARY_ERROR_MESSAGE)
        self._salary = value

    def interact(self, other):
        """
        have 2 employees talk and be cool w/ eachother
        unless they hate eachother then they get not happy
        """
        if other.name not in self.relationships:
            self.relationships[other.name] = 0
        if self.relationships[other.name] > RELATIONSHIP_THRESHOLD:
            self.happiness += 1
        elif self.happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[other.name] += 1
        else:
            self.relationships[other.name] -= 1
            self.happiness -= 1

    def daily_expense(self):
        """
        "death and taxes"
        """
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE

    def __str__(self):
        return self.name + "\n\tSalary: $"+str(self.salary)+"\n\tSavings: $" + str(self.savings) + \
        "\n\tHappiness: " + str(self.happiness)+"%"+"\n\tPerformance: "+str(self.performance) + "%"


# TODO: implement this class. You may delete this comment when you are done.
class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """


# TODO: implement this class. You may delete this comment when you are done.
class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """


# TODO: implement this class. You may delete this comment when you are done.
class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
